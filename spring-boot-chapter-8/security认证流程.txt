入口：
1.调用该方法来处理请求：AbstractAuthenticationProcessingFilter.doFilter(ServletRequest, ServletResponse, FilterChain)
   if (!requiresAuthentication(request, response)) {//判断是否需要认证
			chain.doFilter(request, response);

			return;
   }
//如果需要，则通过
   attemptAuthentication(request, response);//发起认证流程
   将最终调用UsernamePasswordAuthenticationFilter.attemptAuthentication(HttpServletRequest, HttpServletResponse)的方法来处理

   //获取用户提交的用户名和密码
   UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(
				username, password);

		// Allow subclasses to set the "details" property
		setDetails(request, authRequest);
		
		//通过认证管理器发起认证流程，该过程是一个委托的过程，最终进入4
		return this.getAuthenticationManager().authenticate(authRequest);

4》
认证流程：
调用AbstractUserDetailsAuthenticationProvider.authenticate(Authentication authentication) throws AuthenticationException方法
1.通过该方法查询数据库的用户信息：
AbstractUserDetailsAuthenticationProvider.retrieveUser(String username, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException

2.判断该用户是否可用
preAuthenticationChecks.check(user);

3.判断密码
additionalAuthenticationChecks(user,(UsernamePasswordAuthenticationToken) authentication);该方法为抽象方法，将调用DaoAuthenticationProvider实现进行处理
该方法中将通过PasswordEncoder类的方法进行比对密码